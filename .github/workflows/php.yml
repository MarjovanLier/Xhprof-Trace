name: PHP CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  Test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php-versions: ["8.1", "8.2", "8.3"]
    steps:
      # This step checks out a copy of your repository.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        id: checkout

      # This step sets up PHP environment for the job.
      - name: Setup PHP
        id: setup-php
        if: steps.checkout.outcome == 'success'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: zip

      # This step validates the composer.json and composer.lock files.
      - name: Validate composer.json and composer.lock
        id: composer-validate
        if: steps.setup-php.outcome == 'success'
        run: composer validate --strict

      # This step installs the project dependencies.
      - name: Install dependencies
        id: composer-install
        if: steps.composer-validate.outcome == 'success'
        run: composer install --prefer-dist --no-progress --no-interaction

      # This step caches the Composer packages for faster execution.
      - name: Cache Composer packages
        id: composer-cache
        if: steps.composer-install.outcome =='success'
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@v3
        if: steps.composer-cache.outcome == 'success'
        with:
          go-version: '1.22'

      - name: Install osv-scanner
        id: install-osv-scanner
        if: steps.setup-go.outcome == 'success'
        run: go install github.com/google/osv-scanner/cmd/osv-scanner@v1

      - name: Scan composer.lock for vulnerabilities
        id: scan-vulnerabilities
        if: steps.install-osv-scanner.outcome == 'success'
        run: osv-scanner scan --no-ignore composer.lock

      # This step checks for vulnerabilities in the project dependencies.
      - name: Check for vulnerabilities
        id: vulnerabilities-check
        if: steps.composer-install.outcome == 'success'
        run: composer test:vulnerabilities-check

      # This step runs tests with PHPUnit.
      - name: Run tests with PHPUnit
        id: phpunit
        if: steps.composer-install.outcome =='success'
        run: composer test:phpunit

  Release:
    needs: test
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        id: checkout

      # This step fetches all tags from the repository.
      - name: Fetch all tags
        id: fetch-tags
        if: steps.checkout.outcome == 'success'
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      # This step gets the latest tag from the repository.
      - name: Get latest tag
        id: latest-tag
        if: steps.fetch-tags.outcome == 'success' && steps.checkout.outcome == 'success'
        run: |
          echo "LATEST_TAG=$(git tag | sort -V | tail -n1)" >> $GITHUB_ENV

      # This step increments the minor version of the latest tag.
      - name: Increment the minor version
        id: new-tag
        if: env.LATEST_TAG != '' && steps.checkout.outcome == 'success'
        run: |
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          NEW_PATCH=$((PATCH+1))
          NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      # This step creates and pushes a new tag to the repository.
      - name: Create and push new tag
        id: push-tag
        if: github.ref == 'refs/heads/main' && env.NEW_TAG != '' && steps.checkout.outcome == 'success'
        run: |
          git tag $NEW_TAG
          git push origin $NEW_TAG
